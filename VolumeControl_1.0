/* Primera versión de Volume Control para proyecto de Respirador
El ángulo máximo, es decir, el VT al 100%, permitido para cerrar las pinzas se debe ajustar en base a mediciones reales
entre el motor y el AMBU. 
Pendiente validaciones para generación de alarmas.
Al momento se verifica en tiempo real los cambios de los potenciómetros y variación de velocidad. Faltaría generar comparación del
pulsante.
*/

#include <Stepper.h>

//Variables Ingresadas por Dr. (Potenciómetros)
float VT = 0;       //Cantidad de aire a entregar al paciente (0 a 100%) en base a peso del paciente
int RR = 8;        //BPM o Respiraciones por minuto(Respiratory Rate). Entre 8 y 30
int IE = 1;     // Relación inhalación/exhalación (1:1 a 1:4) IE=1,2,3,4.
int Pumbral = 0;     //Límite presión para realizar cambio de VolumeControl to AssitControl


//Variables a calcular
float T = 0;          //Tiempo de inhalación/exhalación T=60/RR (seg)
float Tin = 0;        //Tiempo de inhalación Tin=T/(1+IE) (seg)
float Tex = 0;        //Tiempo de exhalación Tex=T-Tin
float Vin = 0;        //Velocidad de fase de inhalación Vin=VT/Tin (pulsos/seg)
float Vex = 0;

//Parámetros seteados por el usuario
float Th = 150;      //Tiempo de espera (miliseg) al terminar la inhalación (mantiene Pressure Plateau)
float Ve = 0;         //Velocidad de exhalación (pulsos/seg). Velocidad de apertura de dedos del motor.
int Pmax = 40;        //Máxima presión permitida (cmH20). Es igual a Pip (peak inspiratory pressure)
const int PlatMax = 30;  //Plateau pressure cm H2O


//Otros parámetros
int t = 0;           //Cantidad de tiempo en el estado actual o contador de tiempo para comparaciones.
float Pplat = 0;      //Presión a medir al finalizar Tin, durante Th
float PEEP = 0;       //Presión  residual después de exhalar

const unsigned short anguloMax = 100;        //grados que representan el 100% de cerradura de la pinza 
const float angPaso = 1.8;                  //grados que respresentan cada paso del motor (360°/200pasos) 
int pasosReq = 0;           //Pasos requeridos para cerrar la pinza. Se calcula en getVT()
                                                     



//const int stepsPerRevolution = 11;  // change this to fit the number of steps per revolution
// for your motor

// initialize the stepper library on pins 8 through 11:
Stepper myStepper(200, 8, 9, 10, 11);


void setup() {
  Serial.begin(9600);
}

void loop() {
  volumeControl();
}


//Función para ubicar pinzas en posición inicial
void Homing(){
  
}

//Función para control por volumen
void volumeControl(){
  CalcVariablesIngresadas();
//Velocidad en rpm para función de arduino
  Vin=(getVT()/Tin)+3;
  // set the speed at rpm:
  myStepper.setSpeed(Vin);
  t=millis();
  myStepper.step(pasosReq);
  unsigned long temp = 0;
  while ((Tin*1000)>temp){
    //Serial.print("Pres:   ");
    //Serial.println("presión medida del sensor");
    temp = millis()-t;
  }
  ///En este punto se debe hacer la comparación con el encoder para saber si ya se llegó o se pasó
  ///para que no se pase del angulo al 100% o límite
  temp = 0;
  t=millis();
  //Medir presión y mostrar en LCD
  while (Th > temp){
    temp=millis()-t;
    //Serial.print("Pplateau:   ");
    //Serial.println("presión medida del sensor");
  }
  //////////////////////////////////////////////////////

  ///Regreso del motor
  temp = 0;
  t=millis();
  Vex = getVT()/(Tex-0.15)+2;                     //Velocidad en rpm para función de arduino
  // set the speed at rpm:
  myStepper.setSpeed(Vex);
  myStepper.step(-pasosReq);
  temp = millis()-t;
  while ((Tex*1000)>temp){
    //Serial.print("PEEP:   ");
    //Serial.println("presin medida del sensor");
    temp = millis()-t;
  }
}

//////////////////////////////////////////////////////////////////////////////////////
// Variables de Inicio

//Calculo variables
void CalcVariablesIngresadas(){
  RR = getBPM();
  T=60/RR;  
  IE = getIE();  
  Tin=T/(1+IE);  
  Tex = T-Tin;
}


/////Obteniendo datos de potenciómetros
int getBPM(){
  float lect = analogRead(0);
  float volt = lect*5/1023;     //Basado en un lector analogo de 10 bits y alimentado por 5V
  int bpm = round(volt*22/5)+8;      //Entre 8 y 30 BPM
  return bpm;
}

int getIE(){
  float lect = analogRead(1);
  int ie = 1;
  if (lect<=255){
    ie = 1;
  }else if (lect>255 && lect<=512){
    ie = 2;
  }else if (lect>512 && lect<=768){
    ie = 3;
  }else{
    ie = 4;
  }
  return ie;
}

int getUmbral(){
  int lect = analogRead(2);
  //Máximo recomendado 40 cmH20
  int pmax = round(lect*40/1023);     //Basado en un lector analogo de 10 bits
  return pmax;
} 

int getVT(){
  float lect = analogRead(3);
  float volt = lect*5/1023;
  int porcentaje = round((volt*100)/5);           //Basado en un lector analogo de 10 bits
  int angulo = porcentaje*anguloMax/100;          //Calculo del angulo requerido en base a porcentaje ingresado por Dr.
  pasosReq = round(angulo/angPaso);           //Pasos requeridos para cerrar la pinza al % calculado
  int pasosReqFac = round(pasosReq*3/10);         //3/10 es un factor para transformar a rpm (necesario para funcion stepper de arduino)
  return pasosReqFac;
}
/////////////////////////////////////////////////////////////////////////////////////////////
